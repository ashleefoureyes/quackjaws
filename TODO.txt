TODO for Deliverable #1
***********************

Assignments for next meeting (Wednesday 30th @ 4pm in ML 466):
    Ashlee:  Introduction ­— Finish introduction and create document skeleton
    Skyler:  Feature Implementation — Most likely done implementing all
                features needed
    Jake:    Requirements Document — Create template and fill out as many
                requirements as possible (at least 75%), create template and fill
                out some use case diagrams
    William: Object Model — Come up with list of objects/classes, start creating
                data dictionary, help with filling out use case diagrams

MAIN PRODUCTS:
==============
Requirements Analysis Document:  60%
    Introduction                  5%
    Functional Requirements      10%
    Non-Functional Requirements  10%
    Use Cases                    25%
    Object Model                 10%

Feature Implementation:          40%
    View Animals                 15%
    Add Animal                   25%

Packaging Requirements:          We get a zero if not done properly.

DETAILED OVERVIEW:
==================

Introduction
------------

* Write introduction document which pulls from the project description to
  explain what the goals of the project are. Also provide an overview of the
  entire Deliverable #1 document.

Requirements
------------

* Create a requirements document in a spreadsheet which details the requirements
  of the project. The spreadsheet will have two categories: functional and
  non-functional requirements. In each category, the columns will be:
  Requirement Number, Requirement Name, Requirement Description, Completion
  Status (as a % or as "Complete", "In Progress", etc), Person Assigned.

    * There must be at least three different non-functional requirements for
      each of the 9 functional requirement categories (see S2.2 Slide 41). We
      are not bound to complete the ones we make up which are not in the
      project description.

* Take the basic numbering, names, and descriptions from the internal
  requirements document and add it to the final deliverable documentation.

Use Cases
---------

*  Set of use cases, uniquely numbered, represented with a UML diagram and a
   table-based description, which cover all functional requirements.

    * Must include high level use cases for abstract functionality and detailed
      use cases with refinements. Detail should match ARENA case study.

    * Must represent all relationships between use cases (e.g. includes,
      extends, etc).

      * High level and detailed cases must be depicted together using includes
        relationship.

      * Exceptions must be depicted as separate use cases with extends
        relationship to the original use case.

    * Every use case must be linked to one or more requirements for
      traceability.

Object Model
------------

* Entity objects must be identified and described in a data dictionary.
  Inclusion of control and boundary objects optional. (This comes from the
  application domain).

  * Entries in data dictionary must include object name, description, list of
    attributes, and all associations.

  * All associations between objects must be modelled using UML class diagrams.
    Information on the diagrams must include dependencies between objects,
    directionality, multiplicity, inheritance, and aggregation. Make sure
    associations do not show up in the attributes. Entry objects never access
    boundary or control objects.

  * All classes must be uniquely numbered for traceability and must be linked to
    one or more use cases.

Feature Implementation
----------------------

* GUI implemented in Qt (using Qt Creator is allowed)

* Staff feature: View all animals

* Staff feature: Add animal (with basic profile information)

* Minimum of 5 different animal profiles in persistent storage (plain text files
  are good for this deliverable). Animal profiles must be loaded into memory
  when the program launches. Animal profiles must include the basic physical
  attributes.

Packaging Requirements
----------------------

* All documentation must be professional (cover page, table of contents, page
  numbers, table of figures, section numbers/names, etc). All diagrams and
  tables must be introduced and explained in the text. Everything must be in own
  words.

* Documentation must be submitted as a PDF.

* Write a script and use a makefile to compile the program.

* Provide all code and code-based stuff in a tar file. Do not provide compiled
  code or object files, just source code and scripts/readme.
